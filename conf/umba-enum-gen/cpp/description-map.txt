OctNumberFormat                         = 0$(VALUE)
DecNumberFormat                         = $(VALUE)
HexNumberFormat                         = 0x$(VALUE)

FileProlog                              = /*! \\file\n    \\brief Autogenerated enumerations description maps (Umba Enum Gen)\n */\n\n#pragma once\n\n
FileEpilog                              = \n

NamespaceBegin                          = namespace $(NS){\n
NamespaceEnd                            = } // namespace $(NS)\n
NamespaceNameFormat                     = $(NS)
#NamespaceNameFormat                     = N$(NS)
NamespaceSeparator                      = ::

EnumDescriptionCommentFormat            = ""
#""$(COMMENT)""

#EnumNameFormat                          = E$(ENAMNAME)
EnumNameFormat                          = $(ENAMNAME)
#EnumFlagsNameFormat                     = $(ENAMNAME)Flags
EnumFlagsNameFormat                     = $(ENAMNAME)

EnumDeclarationBegin                    = " inline std::map<$(ENAMNAME), std::string> make$(ENAMNAME)DescriptionMap()"
 
EnumDeclarationWithUnderlyingTypeBegin  = " inline std::map<$(ENAMNAME), std::string> make$(ENAMNAME)DescriptionMap()"
EnumDeclarationClassKeyword             = ""

TypeCast                                = ""

EnumScopeBegin                          = \n$(INDENT){
EnumScopeEnd                            = \n};\nreturn m;\n} // $(DECLBEGIN)\n\ninline const std::map<$(ENAMNAME), std::string>& get$(ENAMNAME)DescriptionMap()\n{\n    static auto m = make$(ENAMNAME)DescriptionMap();\n    return m;\n}\n\nstd::string enum_get_description($(ENAMNAME) e)\n{\n    const auto &m = get$(ENAMNAME)DescriptionMap();\n    auto it = m.find(e);\n    return it==m.end() ? std::string("No description") : it->second;\n}\n\n


EnumItemDeclarationSeparatorBeforeFirst = \nstd::map<$(ENAMNAME), std::string> m =\n{\n 
EnumItemDeclarationSeparatorBefore      = ,\n
EnumItemDeclarationSeparatorAfter       = "" 

EnumItemDeclaration                     = "{ $(ENAMNAME)::$(ITEMNAME), $(ITEMCOMMENT) }"
EnumItemComment                         = ""$(ITEMCOMMENTTEXT)""
EnumFlagsDeclaration                    = ""
EnumNonFlagsDeclaration                 = ""

EnumSerializationBegin                  = ""
EnumSerializationEnd                    = ""
EnumSerializationItem                   = ""

EnumDeserializationBegin                = ""
EnumDeserializationEnd                  = ""
EnumDeserializationItem                 = ""

EnumItemSerializeBeforeFirst            = ""
EnumItemSerializeBefore                 = ""
EnumItemSerializeAfter                  = ""

EnumSerializeSet                        = ""
EnumDeserializeSet                      = ""
EnumSerializeSetType                    = ""

EnumUserIncludeFormat                   = #include \"$(FILENAME)\"
EnumSystemIncludeFormat                 = #include <$(FILENAME)>

EnumIncludesBefore                      = \n
EnumIncludesAfter                       = \n
EnumIncludesEntrySeparator              = \n
EnumIncludesGroupSeparator              = \n
EnumIncludesBlockSeparator              = \n

EnumDeclarationIncludes                 = 
#marty_cpp/marty_ns.h
EnumFlagDeclarationIncludes             = <unordered_map>, <map>, marty_cpp/marty_flag_ops.h
EnumSerializationIncludes               = <unordered_map>, <map>, <string>, <exception>, <stdexcept>, marty_cpp/marty_enum.h
EnumDeserializationIncludes             = <unordered_map>, <map>, <string>, <exception>, <stdexcept>, marty_cpp/marty_enum.h
EnumFlagIncludes                        = marty_cpp/marty_flags.h
EnumSetIncludes                         = <unordered_set>, <set>



